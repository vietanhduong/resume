name: "Resume CI"

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      build:
        description: "build"
        required: false
        default: "false"

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      have_build: ${{ steps.have_build.outputs.result }}
      current_branch: ${{ steps.current_branch.outputs.value }}
      commit_tag: ${{ steps.commit_tag.outputs.value }}
      version_tag: ${{ steps.version_tag.outputs.value }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Extract branch
        shell: bash
        id: current_branch
        run: |
          BRANCH="${GITHUB_REF#refs/heads/}"
          if [[ "$GITHUB_REF" =~ refs/tags ]]; then
            raw=$(git branch -r --contains ${{ github.ref }})
            BRANCH=${raw/origin\/}
          fi
          echo "::set-output name=value::$BRANCH"
      - name: Get Git Commit Tag
        shell: bash
        id: commit_tag
        run: |
          COMMIT_HASH="$(echo $GITHUB_SHA | head -c7)"
          echo "::set-output name=value::$COMMIT_HASH"
          
      - name: Get version tag
        id: version_tag
        run: |
          [[ ! "$GITHUB_REF" =~ refs/tags ]] && exit
          echo "::set-output name=value::${GITHUB_REF#refs/tags/}"
          
      - name: Build new Image or not
        id: have_build
        run: |
          BUILD="${{ github.event.inputs.build }}"
          BUILD="${BUILD:-false}"

          COMMIT_MSG="${{ github.event.head_commit.message }}"
          COMMIT_MSG="$(echo $COMMIT_MSG | awk '{print tolower($0)}')"

          VERDICT=true
          if [[ ! "$COMMIT_MSG" =~ ^build.* ]] && [[ "$BUILD" != "true" ]]; then
            echo "Commit not start with 'build' or input is false"
            VERDICT=false
          fi

          echo "::set-output name=result::$VERDICT"

  validate:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Validate resume
        run: ./bin/resume --validate resume.yaml

      - name: Notify to server
        if: needs.prepare.outputs.have_build == 'false'
        run: |
          TOKEN="${{ secrets.PAT }}"
          CODE=$(curl -sSLf -H "Authorization: token $TOKEN" -w "%{http_code}" https://resume.anhdv.dev/fetch)
          [[ "$CODE" == 20* ]] || exit 1

  build:
    needs:
      - prepare
      - validate
    env:
      BRANCH: ${{ needs.prepare.outputs.current_branch }}
      SHORT_COMMIT: ${{ needs.prepare.outputs.commit_tag }}
    if: needs.prepare.outputs.have_build == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Validate resume
        run: ./bin/resume --validate resume.yaml

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master

      - name: Docker login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/resume:${{ env.BRANCH }}-${{ env.SHORT_COMMIT }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
